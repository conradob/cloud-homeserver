services:
  proxy:
    image: traefik
    container_name: traefik
    depends_on:
      - authelia
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.provider=hetzner"
      - "--certificatesresolvers.letsencrypt.acme.email=support@${MY_DOMAIN}"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.disablePropagationCheck=false"
      - "--certificatesresolvers.letsencrypt.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--entrypoints.websecure.http.tls.certResolver=letsencrypt"
      - "--entrypoints.websecure.http.tls.domains[0].main=${MY_DOMAIN}"
      - "--entrypoints.websecure.http.tls.domains[0].sans=*.${MY_DOMAIN}"
    volumes:
      - "../data/traefik/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${MY_DOMAIN}`)"
      - "traefik.http.routers.api.entryPoints=websecure"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.middlewares=authelia@docker"
    ports:
      - "443:443"
      - "80:80"
    environment:
      HETZNER_API_KEY: "${HETZNER_API_KEY}"

  authelia_redis:
    image: redis
    restart: unless-stopped
    container_name: authelia_redis

  authelia_generate_secrets:
    build: generate_secrets
    volumes:
      - ../data/authelia/secrets:/secrets

  authelia:
    image: authelia/authelia
    container_name: authelia
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authelia.rule=Host(`auth.${MY_DOMAIN}`)"
      - "traefik.http.routers.authelia.entryPoints=websecure"
      - "traefik.http.middlewares.authelia.forwardAuth.address=http://authelia:9091/api/authz/forward-auth"
      - "traefik.http.middlewares.authelia.forwardAuth.trustForwardHeader=true"
      - "traefik.http.middlewares.authelia.forwardAuth.authResponseHeaders=Remote-User,Remote-Groups,Remote-Email,Remote-Name"
    depends_on:
      authelia_generate_secrets:
        condition: service_completed_successfully
    volumes:
      - ../data/authelia:/config
    restart: unless-stopped
    expose:
      - 9091
    environment:
      TZ: "Europe/Lisbon"
      X_AUTHELIA_CONFIG_FILTERS: "template"
      MY_DOMAIN: "${MY_DOMAIN}"
      AUTHELIA_IDENTITY_VALIDATION_RESET_PASSWORD_JWT_SECRET_FILE: "/config/secrets/JWT_SECRET"
      AUTHELIA_SESSION_SECRET_FILE: "/config/secrets/SESSION_SECRET"
      AUTHELIA_STORAGE_ENCRYPTION_KEY_FILE: "/config/secrets/STORAGE_ENCRYPTION_KEY"

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${MY_DOMAIN}`)"
      - "traefik.http.routers.sonarr.entryPoints=websecure"
      - "traefik.http.routers.sonarr.middlewares=authelia@docker"
    environment:
      TZ: "Europe/Lisbon"
    volumes:
      - ../data/sonarr:/config
      - /mnt/media/TV:/tv
      - /mnt/media/Downloads:/downloads

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.rule=Host(`radarr.${MY_DOMAIN}`)"
      - "traefik.http.routers.radarr.entryPoints=websecure"
      - "traefik.http.routers.radarr.middlewares=authelia@docker"
    environment:
      TZ: "Europe/Lisbon"
    volumes:
      - ../data/radarr:/config
      - /mnt/media/Movies:/movies
      - /mnt/media/Downloads:/downloads

  deluge:
    container_name: deluge
    image: linuxserver/deluge:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.deluge.rule=Host(`deluge.${MY_DOMAIN}`)"
      - "traefik.http.routers.deluge.entryPoints=websecure"
      - "traefik.http.routers.deluge.middlewares=authelia@docker"
    environment:
      TZ: "Europe/Lisbon"
    volumes:
      - ../data/deluge:/config
      - /mnt/media/Downloads:/downloads

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    environment:
      TZ: "Europe/Lisbon"
    volumes:
      - ../data/jackett:/config
      - /mnt/media/Downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jackett.rule=Host(`jackett.${MY_DOMAIN}`)"
      - "traefik.http.routers.jackett.entryPoints=websecure"
      - "traefik.http.routers.jackett.middlewares=authelia@docker"

  jellyfin:
    container_name: jellyfin
    image: jellyfin/jellyfin:latest
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jellyfin.rule=Host(`jellyfin.${MY_DOMAIN}`)"
      - "traefik.http.routers.jellyfin.entryPoints=websecure"
    environment:
      TZ: "Europe/Lisbon"
    volumes:
      - ../data/jellyfin:/config
      - /mnt/media/Movies:/movies
      - /mnt/media/TV:/tv

  mysql:
    image: mariadb:latest
    container_name: mysql_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD}"
      TZ: Europe/Lisbon
    volumes:
      - /mnt/media/nextcloud_db:/var/lib/mysql
      - ./db-init:/docker-entrypoint-initdb.d

  odoo_postgres:
    image: postgres:15
    container_name: odoo_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${ODOO_DB_NAME}"
      POSTGRES_USER: "${ODOO_DB_USER}"
      POSTGRES_PASSWORD: "${ODOO_DB_PASSWORD}"
      TZ: Europe/Lisbon
    volumes:
      - ../data/odoo_postgres:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped

  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    restart: unless-stopped
    depends_on:
      - mysql
      - redis
    environment:
      TZ: Europe/Lisbon
      MYSQL_HOST: "mysql"
      MYSQL_USER: "${MYSQL_NEXTCLOUD_USER}"
      MYSQL_PASSWORD: "${MYSQL_NEXTCLOUD_PASSWORD}"
      MYSQL_DATABASE: "${MYSQL_NEXTCLOUD_DATABASE}"
      REDIS_HOST: "redis"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nextcloud.rule=Host(`next.${MY_DOMAIN}`)"
      - "traefik.http.routers.nextcloud.entryPoints=websecure"
    volumes:
      - /mnt/personal/nextcloud/app:/var/www/html
      - /mnt/personal/nextcloud/data:/var/www/html/data
      - /mnt/personal/media:/mnt/media

  odoo:
    image: ghcr.io/${GITHUB_USERNAME}/${ODOO_REPO_NAME}:latest
    container_name: odoo
    restart: unless-stopped
    depends_on:
      - odoo_postgres
    environment:
      TZ: Europe/Lisbon
      ODOO_DB_HOST: "${ODOO_DB_HOST}"
      ODOO_DB_USER: "${ODOO_DB_USER}"
      ODOO_DB_PASSWORD: "${ODOO_DB_PASSWORD}"
      ODOO_DB_NAME: "${ODOO_DB_NAME}"
      ODOO_DB_PORT: "${ODOO_DB_PORT}"
      ODOO_INIT_MODULES: knowlix_skin_brand
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.odoo.rule=Host(`odoo.${MY_DOMAIN}`)"
      - "traefik.http.routers.odoo.entryPoints=websecure"
      - "traefik.http.services.odoo.loadbalancer.server.port=8069"

      # --- HTTP app on 8069 ---
      - "traefik.http.routers.odoo.tls=true"
      # (optionally protect the *app* with Authelia, but not the WS)
      # - "traefik.http.routers.odoo.middlewares=authelia@docker"

      # --- WebSocket bus on 8072 ---
      - "traefik.http.routers.odoo-ws.rule=Host(`odoo.${MY_DOMAIN}`) && PathPrefix(`/websocket`)"
      - "traefik.http.routers.odoo-ws.entryPoints=websecure"
      - "traefik.http.routers.odoo-ws.tls=true"
      - "traefik.http.services.odoo-ws.loadbalancer.server.port=8072"

      # Keep original Host header (nice to have)
      - "traefik.http.services.odoo.loadbalancer.passhostheader=true"
      - "traefik.http.services.odoo-ws.loadbalancer.passhostheader=true"
